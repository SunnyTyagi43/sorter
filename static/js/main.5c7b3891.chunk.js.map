{"version":3,"sources":["logo.svg","SortingAlgorithms/SortingAlgorithms.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["swap","array","i","j","quickSortHelper","low","high","animations","pi","partition","k","push","tmp","mergeSortHelper","mainArray","startIndex","endIndex","auxillaryArray","middleIndex","Math","floor","doMerge","SortingVisualizer","props","state","message","showMessage","this","resetArray","array1","n","window","screen","width","min","max","random","setState","length","slice","mergeSort","isColorChange","arrayBars","document","getElementsByClassName","barOne","barTwo","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","barIndex","newBarHeight","height","parseInt","match","arraySortedOrNot","quickSort","isSwapped","bubbleSort","key","insertionSort","className","map","val","indx","onClick","marginTop","Component","arr","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c7b3891.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\n//InsertionSort\n\nexport const insertionSort=(array)=>{\n    let animations=[];\n    let key,j;\n    for(let i=1;i<array.length;i++){\n        key=array[i];\n        j=i-1;\n        while(j>=0 && array[j]>key){\n            animations.push(['red',j+1,j])\n            animations.push(['#007acc',j+1,j])\n            animations.push(['none',j+1,array[j]])\n            array[j+1]=array[j];\n            j--;\n        }\n        animations.push(['none',j+1,key])\n        array[j+1]=key;\n    }\n    return animations;\n}\n\n//BubbleSort\n\nexport const bubbleSort=(array)=>{\n    \n    let animations=[];\n    let isSwapped=false;\n    for(let i=0;i<array.length-1;i++){\n        isSwapped=false;\n        for(let j=0;j<array.length-i-1;j++){\n            animations.push(['red',j,j+1]);\n            animations.push(['#007acc',j,j+1]);\n            \n            if(array[j]>array[j+1]){\n                animations.push(['none',j,j+1]);\n                swap(array,j,j+1);\n                isSwapped=true;\n            }\n\n        }\n        if(!isSwapped) break;\n    }\n    return animations;\n}\n\nconst swap=(array,i,j)=>{\n    array[i]=array[i]+array[j];\n    array[j]=array[i]-array[j];\n    array[i]=array[i]-array[j];\n}\n\n\n// QuickSort\n\nexport const quickSort=(array)=>{\n    let animations=[];\n    if(array.length<=1) return array;\n    quickSortHelper(array,0,array.length-1,animations);\n    return animations;\n}\n\nconst quickSortHelper=(array,low,high,animations)=>{\n    if(low<high){\n        let pi=partition(array,low,high,animations);\n\n        quickSortHelper(array,low,pi-1,animations);\n        quickSortHelper(array,pi+1,high,animations);\n    }\n}\n\nconst partition=(array,low,high,animations)=>{\n    let pi=array[high];\n    let k=low-1;\n    for(let i=low;i<=high;i++){\n        animations.push(['red',i,high]);\n        animations.push(['#007acc',i,high]);\n        if(array[i]<pi){\n            k++;\n            animations.push(['none',i,k]);\n            let tmp=array[i];\n            array[i]=array[k];\n            array[k]=tmp;\n            \n        }\n    }\n    animations.push(['red',k+1,high]);\n    animations.push(['#007acc',k+1,high]);\n    animations.push(['none',k+1,high]);\n    let tmp=array[k+1];\n    array[k+1]=array[high];\n    array[high]=tmp;\n    return k+1;\n}\n\n\n//MergeSort\n\nexport const mergeSort=(array)=>{\n    const animations=[];\n    if(array.length<=1) return array;\n    const auxillaryArray=array.slice();\n    mergeSortHelper(array,0,array.length-1,auxillaryArray,animations);\n    return animations;\n}\n\nconst mergeSortHelper=(mainArray,startIndex,endIndex,auxillaryArray,animations)=>{\n    if(startIndex===endIndex) return;\n    const middleIndex=Math.floor((endIndex+startIndex)/2);\n    mergeSortHelper(auxillaryArray,startIndex,middleIndex,mainArray,animations);\n    mergeSortHelper(auxillaryArray,middleIndex+1,endIndex,mainArray,animations);\n    doMerge(mainArray,startIndex,middleIndex,endIndex,auxillaryArray,animations);\n}\n\nconst doMerge=(mainArray,startIndex,middleIndex,endIndex,auxillaryArray,animations)=>{\n    let k=startIndex;\n    let i=startIndex;\n    let j=middleIndex+1;\n    while(i<=middleIndex && j<=endIndex){\n        animations.push([i,j]);\n        animations.push([i,j]);\n        if(auxillaryArray[i]<=auxillaryArray[j]){\n            animations.push([k,auxillaryArray[i]]);\n            mainArray[k++]=auxillaryArray[i++];\n        }else{\n            animations.push([k,auxillaryArray[j]]);\n            mainArray[k++]=auxillaryArray[j++];\n        }\n    }\n\n    while(i<=middleIndex){\n        animations.push([i,i]);\n        animations.push([i,i]);\n        animations.push([k,auxillaryArray[i]]);\n        mainArray[k++]=auxillaryArray[i++];\n    }\n\n    while(j<=endIndex){\n        animations.push([j,j]);\n        animations.push([j,j]);\n        animations.push([k,auxillaryArray[j]]);\n        mainArray[k++]=auxillaryArray[j++];\n    }\n};","import React,{Component} from 'react';\nimport \"../App.css\";\nimport { mergeSort,quickSort,bubbleSort,insertionSort } from '../SortingAlgorithms/SortingAlgorithms';\nimport './SortingVisualizer.css';\n\nexport default class SortingVisualizer extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            array:[],\n            message:\"\",\n            showMessage:false\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        if(this.state.message===\"\"){\n            const array1=[];\n            let n=window.screen.width/8;\n            for(let i=0;i<n;i++){\n                array1.push(randomIntFromInterval(5,500));\n            }\n            this.setState({array:array1});\n        }else{\n            this.setState({showMessage:true})\n            \n        }\n    }\n\n    mergeSort(){\n        // let arr1=this.state.array.slice().sort((a,b)=>a-b);\n        // let arr2=mergeSort([...this.state.array]);\n\n        // console.log(isArrayEqual(arr1,arr2));\n        if(this.state.message===\"\"){\n            this.setState({message:\"MergeSort is already running. please wait....\"});\n            const animations=mergeSort([...this.state.array]);\n            let n=animations.length;\n            for(let i=0;i<animations.length;i++){\n                let isColorChange=i%3!==2;\n                let arrayBars=document.getElementsByClassName('array-bar');\n                if(isColorChange){\n                    let [barOne,barTwo]=animations[i];\n                    let barOneStyle=arrayBars[barOne].style;\n                    let barTwoStyle=arrayBars[barTwo].style;\n                    const color=i%3===0?'red':'#007acc';\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor=color;\n                        barTwoStyle.backgroundColor=color;\n                        if(i===n-1){\n                            this.setState({message:\"\"});\n                            this.setState({showMessage:false});\n                        }\n                    }, i*5);\n                }else{\n                    setTimeout(() => {\n                        let [barIndex,newBarHeight]=animations[i];\n                        let barStyle=arrayBars[barIndex].style;\n                        barStyle.height=`${newBarHeight}px`;\n                        if(i===n-1){\n                            this.setState({message:\"\"});\n                            this.setState({showMessage:false});\n                        }\n                    }, i*5);\n                }\n                \n\n            }\n            \n        }else{\n            this.setState({showMessage:true});\n        }\n\n    }\n\n    quickSort(){\n        // let arr1=this.state.array.slice().sort((a,b)=>a-b);\n        // let arr2=quickSort([...this.state.array]);\n\n        // console.log(isArrayEqual(arr1,arr2));\n        let arrayBars=document.getElementsByClassName('array-bar');\n        let height=[];\n        for(let i=0;i<arrayBars.length;i++){\n            height.push(parseInt(arrayBars[i].style.height.match(/(\\d+)/)[0]));\n        }\n        let n=height.length;\n        // console.log(\"sort\",arraySortedOrNot(height,n));\n        if(arraySortedOrNot(height,n)===0){ //Array is not sorted\n            // this.setState({message:\"Array is not sorted\"});\n            if(this.state.message===\"\"){\n                this.setState({message:\"quickSort is already running. please wait....\"})\n\n                const animations=quickSort([...this.state.array]);\n                for(let i=0;i<animations.length;i++){\n\n                    let arrayBars=document.getElementsByClassName('array-bar');\n                    let [color,barOne,barTwo]=animations[i];\n                    let barOneStyle=arrayBars[barOne].style;\n                    let barTwoStyle=arrayBars[barTwo].style;\n\n                    let isColorChange=color!=='none';\n                    \n                    \n                    if(isColorChange){\n                        \n                        // const color=i%3===0?'red':'#007acc';\n                        setTimeout(() => {\n                            barOneStyle.backgroundColor=color;\n                            barTwoStyle.backgroundColor=color;\n                            if(i===animations.length-1){\n                                this.setState({message:\"\"});\n                                this.setState({showMessage:false});\n                            }\n                        }, i*5);\n                    }else{\n                        setTimeout(() => {\n                            \n                            \n                            let tmp=barOneStyle.height;\n                            barOneStyle.height=barTwoStyle.height;\n                            barTwoStyle.height=tmp;\n                            if(i===animations.length-1){\n                                this.setState({message:\"\"});\n                                this.setState({showMessage:false});\n                            }\n                            // barStyle.height=`${newBarHeight}px`;\n                        }, i*5);\n                    }\n\n                }\n\n            }else{\n                this.setState({showMessage:true});\n            }\n        }else{\n            this.setState({showMessage:true,message:\"Array is Already sorted, you can generate new array...\"});\n            setTimeout(() => {\n                this.setState({showMessage:false,message:\"\"})\n            }, 2000);\n        }\n    }\n\n    bubbleSort(){\n        // let arr1=this.state.array.slice().sort((a,b)=>a-b);\n        // let arr2=bubbleSort([...this.state.array]);\n\n        // console.log(isArrayEqual(arr1,arr2));\n        let arrayBars=document.getElementsByClassName('array-bar');\n        let height=[];\n        for(let i=0;i<arrayBars.length;i++){\n            height.push(parseInt(arrayBars[i].style.height.match(/(\\d+)/)[0]));\n        }\n        let n=height.length;\n        // console.log(\"sort\",arraySortedOrNot(height,n));\n        if(arraySortedOrNot(height,n)===0){ //Array is not sorted\n            // this.setState({message:\"Array is not sorted\"});\n            if(this.state.message===\"\"){\n                this.setState({message:\"bubbleSort is already running. please wait....\"})\n    \n                const animations=bubbleSort([...this.state.array]);\n                // console.log(animations);\n                for(let i=0;i<animations.length;i++){\n    \n                    // let arrayBars=document.getElementsByClassName('array-bar');\n                    let [color,barOne,barTwo]=animations[i];\n                    let barOneStyle=arrayBars[barOne].style;\n                    let barTwoStyle=arrayBars[barTwo].style;\n    \n                    let isColorChange=color!=='none';\n                    \n                    \n                    if(isColorChange){\n                        \n                        // const color=i%3===0?'red':'#007acc';\n                        setTimeout(() => {\n                            barOneStyle.backgroundColor=color;\n                            barTwoStyle.backgroundColor=color;\n                            if(i===animations.length-1){\n                                this.setState({message:\"\"});\n                                this.setState({showMessage:false});\n                            }\n                        }, i*1);\n                    }else{\n                        setTimeout(() => {\n                            \n                            \n                            let tmp=barOneStyle.height;\n                            barOneStyle.height=barTwoStyle.height;\n                            barTwoStyle.height=tmp;\n                            if(i===animations.length-1){\n                                this.setState({message:\"\"});\n                                this.setState({showMessage:false});\n                            }\n                            // barStyle.height=`${newBarHeight}px`;\n                        }, i*1);\n                    }\n    \n                }\n            }else{\n                this.setState({showMessage:true});\n            }\n        }else{\n            this.setState({showMessage:true,message:\"Array is Already sorted, you can generate new array...\"});\n            setTimeout(() => {\n                this.setState({showMessage:false,message:\"\"})\n            }, 2000);\n        }\n        // console.log(\"h\",height);\n\n\n\n        \n    }\n\n    insertionSort(){\n\n        // let arr1=this.state.array.slice().sort((a,b)=>a-b);\n        // let arr2=insertionSort([...this.state.array]);\n\n        // console.log(isArrayEqual(arr1,arr2));\n\n        if(this.state.message===\"\"){\n            this.setState({message:\"insertionSort is already running. please wait....\"})\n\n            const animations=insertionSort([...this.state.array]);\n            for(let i=0;i<animations.length;i++){\n                let arrayBars=document.getElementsByClassName('array-bar');\n                let [color,barOne,barTwo]=animations[i];\n                \n\n                let isColorChange=color!=='none';\n                \n                \n                if(isColorChange){\n                    let barOneStyle=arrayBars[barOne].style;\n                    let barTwoStyle=arrayBars[barTwo].style;\n                    // const color=i%3===0?'red':'#007acc';\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor=color;\n                        barTwoStyle.backgroundColor=color;\n                        if(i===animations.length-1){\n                            this.setState({message:\"\"});\n                            this.setState({showMessage:false});\n                        }\n                    }, i*1);\n                }else{\n                    setTimeout(() => {\n                        // let barStyle=arrayBars[barOne].style;\n                        // let [barIndex,newBarHeight]=animations[i];\n                        let barStyle=arrayBars[barOne].style;\n                        barStyle.height=`${barTwo}px`;\n                        if(i===animations.length-1){\n                            this.setState({message:\"\"});\n                            this.setState({showMessage:false});\n                        }\n                    }, i*1);\n                }\n\n            }\n\n        }else{\n            this.setState({showMessage:true});\n        }\n\n        \n    }\n\n\n\n    render(){\n        const {array}=this.state;\n        // console.log(\"r\",array);\n        return(\n            <div>\n                <div>\n                    <div className=\"header\">\n                        Sorting Visualiser\n                    </div>\n                    <div className=\"message\">\n                        <span >- Sunny Tyagi</span>\n                        {this.state.showMessage?this.state.message:\"\"}\n                    </div>\n                </div>\n                <div className=\"array-container\">\n                \n                    {array.map((val,indx)=>(\n                        <div className=\"array-bar\" style={{height:`${val}px`}} key={indx}>\n                        </div>\n                    ))}\n                    \n                </div>\n\n                <div className=\"\">\n                    <button className=\"buttons\" onClick={()=>this.resetArray()} style={{marginTop:'5px'}}>Generate New Array</button>\n                    <button className=\"buttons\" onClick={()=>this.quickSort()} style={{marginTop:'5px'}}>Quick Sort</button>\n                    <button className=\"buttons\" onClick={()=>this.mergeSort()} style={{marginTop:'5px'}}>Merge Sort</button>\n                    <button className=\"buttons\" onClick={()=>this.bubbleSort()} style={{marginTop:'5px'}}>Bubble Sort</button>\n                    <button className=\"buttons\" onClick={()=>this.insertionSort()} style={{marginTop:'5px'}}>Insertion Sort</button>\n                </div>\n            </div>\n            \n            \n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraySortedOrNot(arr, n)\n{\n     \n    // Array has one or no element or the\n    // rest are already checked and approved.\n    if (n == 1 || n == 0)\n        return 1;\n \n    // Unsorted pair found (Equal values allowed)\n    if (arr[n - 1] < arr[n - 2])\n        return 0;\n \n    // Last pair was sorted\n    // Keep on checking\n    return arraySortedOrNot(arr, n - 1);\n}\n\nfunction isArrayEqual(left,right) {\n    if(left.length!==right.length) return false\n    let i=0\n    while(i<left.length){\n        if(left[i]!==right[i]) return false\n        i++\n    }\n    return true;\n}","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}